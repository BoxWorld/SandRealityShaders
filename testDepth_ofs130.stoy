uniform vec3 iResolution;           // viewport resolution (in pixels)
uniform float iGlobalTime;          // shader playback time (in seconds)
uniform float iChannelTime[4];      // channel playback time (in seconds)
uniform vec3 iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4 iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4 iDate;                 // (year, month, day, time in seconds)

uniform float z_pos;				//! slider[-2, -1.182, 2];
uniform float h_ratio;				//! slider[0, 0.1, 1];

uniform sampler2D depthTex;		//! depthmap[]

#define HEIGHT_RATIO 0.1

vec3 cameraOrigin, rayDir;

float terrain_map( vec3 p ) {
	vec2 p0 = p.xz;
	p0 += 1.0;
	p0 /= 2.0;
	return p.y - h_ratio * texture(depthTex, p0).r;
}

float map( vec3 p)
{
	float d_terrain = terrain_map(p);
	return d_terrain;
}

float march(in vec3 ro, in vec3 rd)
{
	const float maxd = 100.0;
	const float precis = 0.001;
    float h = precis * 2.0;
    float t = 0.0;
	float res = -1.0;
    for(int i = 0; i < 16; i++)
    {
        if(h < precis*t || t > maxd) break;
	    h = map(ro + rd * t);
        t += h;
    }
    if(t < maxd) res = t;
    return res;
}

void mainImage(out vec4 fragColor, in vec2 fragCoord) {

	vec2 uv = fragCoord.xy / iResolution.xy;
	uv = 2. * uv - 1.;
	//uv.x *= iResolution.x/iResolution.y;

	cameraOrigin = vec3(0.0, 0.91, z_pos);
	vec3 cameraTarget = vec3(uv.x, 0.0, uv.y);
	vec3 cameraDir = normalize(cameraTarget - cameraOrigin);
	rayDir = cameraDir;

    float t = march(cameraOrigin, rayDir);
    vec3 col = vec3(0);

	if(t > -0.001)
	{
        vec3 pos = cameraOrigin + t * rayDir;
        float noise = mix(0, 1/h_ratio, pos.y);
        col = vec3(noise);
	}

    fragColor = vec4(col, 1.0);
}

void main() {
	vec4 color;
	mainImage(color, gl_FragCoord.xy);

	color.w = 1.0;
	gl_FragColor = color;
}
