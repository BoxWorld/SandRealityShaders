uniform vec3      iResolution;           // viewport resolution (in pixels)
uniform float     iGlobalTime;           // shader playback time (in seconds)
uniform float     iChannelTime[4];       // channel playback time (in seconds)
uniform vec3      iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4      iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4      iDate;                 // (year, month, day, time in seconds)
uniform float     iSampleRate;           // sound sample rate (i.e., 44100)

uniform sampler2D depthTex;			 	 //! depthmap[]
uniform float z_pos;				//! slider[-2, -1.182, 2];

#define CHANGE_SPEED 0.1				/* terrain changing speed */
#define VIEW_SCOPE   0.13				/* view scope. */
#define TRACK_WIDTH  12.
#define TRACK_HEIGHT 9.

/*=======================global variables========================*/
vec2 uv;
vec3 cameraOrigin, rayDir;
float depth = 0.0;
float dh_car = 0.0;
float cur_car_dir_ang_xz = 0.0;
vec3 terrain_normal = vec3(0.0);
vec3 carPos = vec3(0.0, 0.0, 0.0);

/*=======================proto function declarations=============*/
float terrain_map(vec3 p);
float map(vec3 p);

/*=======================shading utils===========================*/
float sfract(float n){ return smoothstep(0.0,1.0,fract(n)); }
float rand(vec3 n){ return fract(sin(dot(n,vec3(5.3357,-5.8464,5.7645)))*256.75+0.325); }
float noise(vec3 n)
{
    float h1 = mix(rand(vec3(floor(n.x),floor(n.y),floor(n.z))),rand(vec3(ceil(n.x),floor(n.y),floor(n.z))),sfract(n.x));
    float h2 = mix(rand(vec3(floor(n.x),ceil(n.y),floor(n.z))),rand(vec3(ceil(n.x),ceil(n.y),floor(n.z))),sfract(n.x));
    float s1 = mix(h1,h2,sfract(n.y));

    h1 = mix(rand(vec3(floor(n.x),floor(n.y),ceil(n.z))),rand(vec3(ceil(n.x),floor(n.y),ceil(n.z))),sfract(n.x));
    h2 = mix(rand(vec3(floor(n.x),ceil(n.y),ceil(n.z))),rand(vec3(ceil(n.x),ceil(n.y),ceil(n.z))),sfract(n.x));
    float s2 = mix(h1,h2,sfract(n.y));
    return mix(s1,s2,sfract(n.z));
}

vec3 doMaterial( in vec3 pos, in vec3 nor )
{
    float tm = (noise(vec3(pos.xz/2.0,0.0)) + noise(vec3(pos.xz*4.0,0.0)))*0.25;
    float th = (tm+noise(vec3(pos.xz,0.0))*0.25 + noise(vec3(pos.xz/2.0,0.0))*0.75);

    float tn = noise(pos*64.0)*0.05 + noise(pos*32.0)*0.05 + noise(pos*16.0)*0.05 + 0.05;
    return mix(vec3(0.035, tn, 0.025), vec3(tn), clamp(pow(th, 8.0)*0.2, 0.0, 1.0));
}

float calcSoftshadow( in vec3 ro, in vec3 rd )
{
    float res = 1.0;
    float t = 0.5;                 		// selfintersection avoidance distance
	float h = 1.0;
    for( int i=0; i<4; i++ )         	// 40 is the max numnber of raymarching steps
    {
        h = map(ro + rd*t);
        res = min( res, 64.0*h/t );   	// 64 is the hardness of the shadows
		t += clamp( h, 0.02, 2.0 );   	// limit the max and min stepping distances
    }
    return clamp(res, 0.8, 1.0);
}

vec3 doLighting( in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in vec3 mal )
{
    vec3 lin = vec3(0.0);

    vec3  lig = normalize(vec3(1.0, 2.7, 0.09));
    float dif = max(dot(nor, lig), 0.0);
    float sha = 0.0; if( dif > 0.01 ) sha=calcSoftshadow( pos+0.01*nor, lig );

    lin += dif * vec3(4.00, 4.00, 4.00) * sha;
    lin += vec3(0.5);

    vec3 col = mal * lin;

	col = mix(vec3(0.9), col, 1.0 - clamp(dis * dis / 10000.0, 0.0, 1.0));

    return col;
}

/*=======================raymarching models======================*/
float smin(float a,float b,float k){float h=clamp(0.5+0.5*(b-a)/k,0.0,1.0);return b+h*(a-b-k+k*h);}
vec3 cp1;
mat2 cm1;
vec3 rc=vec3(0.7,0.26,1.5);

mat2 trmx,mrmx;//the wheel spinners
float minL,cc3,cc4;//car config
vec4 trpc,cc;//color and stuff
bool bColoring=false;

mat3 rotationMatrix(vec3 axis, float angle)
{
    axis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;

    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,
                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,
                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);
}

float car_map(in vec3 p0){
	p0 -= carPos;

	/* rotation according to terrain surface normal. */
    vec3 up_y = vec3(0., 1., 0.);
	vec3 axis = normalize(cross(up_y, terrain_normal));
	float rot_ang = acos(dot(terrain_normal, up_y) / (length(terrain_normal) * length(up_y)));
	p0 = rotationMatrix(axis, rot_ang) * p0;

	/* rotation in 'x-z' plane, to align car with the track direction. */
	p0 = rotationMatrix(vec3(0.0, 1.0, 0.0), -cur_car_dir_ang_xz + 3.14/2.) * p0;

	/* car model, from eiffie's https://www.shadertoy.com/view/XtsGRH */
	vec3 p=p0;
	p.y += 1.25;
	float d=length(max(vec3(abs(p.x)-0.35,length(p.yz)-1.92,-p.y+1.4),0.0))-0.05;
	d=max(d,p.z-1.0);
	p=p0+vec3(0.0,-0.22,0.39);
	p.xz=abs(p.xz);
	float w1=0.24,w2=cc.z,dL=length(p+vec3(-0.3,0.0,-1.18-p0.z*0.17))-0.05;
	p.xz-=vec2(cc.w,1.0);
	if(p0.z<0.0){
		w1=cc.x;w2=cc.y;
		p.xy=mrmx*p.xy;
	}else p.xz=mrmx*p.xz;
	p.x=abs(p.x);
	float r=length(p.yz);
	d=smin(d,length(vec2(max(max(p.x-w2,0.0),-p.y-0.08),r-w1))-0.02,0.25);
	float d1=length(vec2(max(p.x-w2-0.01,0.0),r-w1+0.05))-0.04;
	if(p0.z<0.0)p.yz=p.yz*trmx;
	else p.yz=trmx*p.yz;
	float d2=min(min(abs(p.z+p.y),abs(p.z-p.y)),min(abs(p.z),abs(p.y)));//8 blades
	d2=max(r-w1+cc3,max(d2-0.003,p.x-w2+0.04));
	d2=min(d2,dL);
	minL=min(minL,d2);//catch the minimum distance to the glowing things
	if(bColoring){
		if(d2<d && d2<d1){trpc+=vec4(1.0,0.6,0.5,256.0);}//spokes/turbines
		else if(d1<d){trpc+=vec4(vec3(clamp(1.0-(r-w1+0.09)*100.0,0.0,1.0)),256.0);}
		else {//the car's body
			if(p0.z<-1.04 || (abs(p0.y-0.58)>0.05-p0.z*0.09 || p0.z>0.25) && length(max(abs(p0.xz+vec2(0.0,-0.27))-vec2(0.18,0.39),0.0))>0.1)trpc+=vec4(1.0,0.9,0.4,16.0);
			else trpc += vec4(0.1, 0.2, 0.3, 2.0);//the windshield
		}
	}
	return min(d,min(d1,d2));
}

float snoise(vec3 p)
{
	p.xy /= 16;
	p.xy += 1.0;
	p.xy *= 0.5;

	depth = texture(depthTex, p.xy).r;

	return depth * 1.6;
}

float terrain_map( vec3 p ) {
    vec3 drpz = vec3(p.xz, 0.0);
	return p.y - snoise(drpz);
}

float map( vec3 p)
{
	float d_terrain = terrain_map(p);
	float d_car     = car_map(p);
	dh_car = d_car - d_terrain;
	return min(d_car, d_terrain);
}

float march(in vec3 ro, in vec3 rd)
{
	const float maxd = 100.0;
	const float precis = 0.001;
    float h = precis * 2.0;
    float t = 0.0;
	float res = -1.0;
    for(int i = 0; i < 16; i++)
    {
        if(h < precis*t || t > maxd) break;
	    h = map(ro + rd * t);
        t += h;
    }
    if(t < maxd) res = t;
    return res;
}

/*==========================main entry===========================*/
void setConfig(){
	float t=mod(iGlobalTime,10.0);
	t=t-5.0;
	if(t>4.0)t=5.0-t;
	t=clamp(t,0.0,1.0);
	cc3=mix(0.06,-0.03,t);
	cc4=mix(0.0,-0.5,t);
	cc=mix(vec4(0.24,0.07,0.1,0.55),vec4(0.33,0.04,0.22,0.72),t);

	float tim=iGlobalTime*5.0,a=cc4*3.0;
	trmx=mat2(cos(tim),sin(tim),-sin(tim),cos(tim));
	mrmx=mat2(cos(a),sin(a),-sin(a),cos(a));

	// car position and rotation params calculation
	float ang = mod(iGlobalTime/2., 6.28) - 3.14;
	float car_pos_x = (TRACK_WIDTH * TRACK_HEIGHT)/sqrt((pow(TRACK_HEIGHT, 2.) + pow(TRACK_WIDTH, 2.)*tan(ang)*tan(ang)));
	if((ang > 3.14/2.) || (ang < -3.14/2.)) {
		car_pos_x *= -1.0;
	}
	float car_pos_z = car_pos_x * tan(ang);
    vec3 pos = vec3(vec2(car_pos_x, car_pos_z), 0.0);
	float car_pos_y = snoise(pos);
	carPos = vec3(car_pos_x, car_pos_y, car_pos_z);
	cur_car_dir_ang_xz = atan(-pow(TRACK_HEIGHT, 2.) * car_pos_x, pow(TRACK_WIDTH, 2.) * car_pos_z);
	vec2 eps = vec2(0.0, 0.3);
	terrain_normal = normalize(
			vec3(
				terrain_map(vec3(carPos + eps.yxx)) - terrain_map(vec3(carPos - eps.yxx)),
				terrain_map(vec3(carPos + eps.xyx)) - terrain_map(vec3(carPos - eps.xyx)),
				terrain_map(vec3(carPos + eps.xxy)) - terrain_map(vec3(carPos - eps.xxy))
			)
	);
}

void initWorldCoords(in vec2 fragCoord) {
    uv = fragCoord.xy / iResolution.xy;
	uv = 2. * uv - 1.;
	uv *= 16;

	cameraOrigin = vec3(0.0, 0.91*16, z_pos*16);
	vec3 cameraTarget = vec3(uv.x, 0.0, uv.y);
	vec3 cameraDir = normalize(cameraTarget - cameraOrigin);
	rayDir = cameraDir;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	initWorldCoords(fragCoord);

	setConfig();
	float tim=iGlobalTime*5.0,a=cc4*3.0;
	trmx=mat2(cos(tim),sin(tim),-sin(tim),cos(tim));//the turbine spinner
	mrmx=mat2(cos(a),sin(a),-sin(a),cos(a));
	tim=iGlobalTime*0.5;

    float t = march(cameraOrigin, rayDir);

	/* ==================shading==================*/
    vec3 col = vec3(0.9);

    if(t > -0.001)
    {
        vec3 pos = cameraOrigin + t * rayDir;
        float noise = mix(0.6, 1.0, pos.y);
        col = vec3(noise);

		if(dh_car < 0.) {
			/* shade car. */
	    	vec3 L=normalize(vec3(0.5,0.5,-0.5));
			vec3 p = pos;
			vec2 v=vec2(2.0/iResolution.y,0.0);
			trpc=vec4(0.0); bColoring=true;
			vec3 N=normalize(vec3(-car_map(p-v.xyy)+car_map(p+v.xyy),-car_map(p-v.yxy)+car_map(p+v.yxy),-car_map(p-v.yyx)+car_map(p+v.yyx)));
			col=trpc.rgb*0.1666*max(0.2,0.25+0.75*dot(N,L));
			col*=mix(vec3(0.5,0.5,1.0),vec3(1.0,1.0,0.5),abs(dot(rayDir,N)));
			col+=vec3(1.0,0.5,0.0)*pow(max(0.0,dot(reflect(rayDir,N),L)),trpc.a);
		}else {
			/* shade terrain. */
			vec2 eps = vec2(0.0, 0.01);
			vec3 normal = normalize(
					vec3(
						map(vec3(pos + eps.yxx)) - map(vec3(pos - eps.yxx)),
						map(vec3(pos + eps.xyx)) - map(vec3(pos - eps.xyx)),
						map(vec3(pos + eps.xxy)) - map(vec3(pos - eps.xxy))
					)
			);
			vec3 mal = doMaterial( pos, normal );
			col = doLighting( pos, normal, rayDir, t, mal );

			/* draw race track */
			float pwa = pow(TRACK_WIDTH, 2.), pwb = pow(TRACK_HEIGHT, 2.);
			float pwx = pos.x * pos.x, pwy = pos.z * pos.z;
			float x1 = sqrt(pwa*pwb*pwx / (pwb*pwx + pwa*pwy));
			float x2 = -x1;
			float x0 = pos.x * x1 > 0. ? x1:x2;
			float z0 = pos.z * x0 / pos.x;
			vec2 uv_c = vec2(x0, z0);
			if(distance(uv_c, vec2(pos.x, pos.z)) < 2.2) {
				float y0 = snoise(vec3(uv_c, iGlobalTime * CHANGE_SPEED));
				float dist = distance(pos, vec3(x0, y0, z0));
				float d_abs = abs(dist);
				col = mix(vec3(0.3 - d_abs/4.), col, pow(smoothstep(0.0, 1.5, d_abs), 5.));
				float a = atan(z0, x0);
				a = mod(a*39.1, 3.0);
				if(a > 1.8) {
					col = mix(vec3(1.0), col, smoothstep(0., 0.02, d_abs));
				}
				if(d_abs > 1.1) {
					col = mix(vec3(1.0), col, smoothstep(1.1, 1.13, d_abs));
				}
			}
		}
    }

    fragColor = vec4(col, 1.0);
}


void main() {
	vec4 color;
	mainImage(color, gl_FragCoord.xy);

	color.w = 1.0;
	gl_FragColor = color;
}
