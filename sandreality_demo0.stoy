uniform vec3      iResolution;       // viewport resolution (in pixels)
uniform float     iGlobalTime;       // shader playback time (in seconds)

uniform sampler2D depthTex;			 //! depthmap[]

float dh = 0.;
mat2 m2 = mat2(0.8,  0.6, -0.6,  0.8);

float noise(in vec2 p){

    float res=0.;
    float f=1.;
	for( int i=0; i< 2; i++ )
	{
        p=m2*p*f+.6;
        f*=1.2;
        res+=sin(p.x+sin(2. * p.y));
	}
	return res/3.;
}

float fbmabs( vec2 p ) {
	p *= 0.5;
	float f=1.;
	float r = 0.0;
    for(int i = 0;i<8;i++){
		r += abs(noise( 6*p*f ))/f;
	    f *=2.;
        p-=vec2(.01,.01)*r;
	}
	return r/2;
}

float sea( vec2 p )
{
	float f = 1.;
	float r = 0.0;
    for(int i = 0; i<8; i++){
		r += (1.-abs(noise( 5*p*f -.12*iGlobalTime)))/f;
	    f *= 2.;
        p-=vec2(-.01,.01)*r;
	}
	return r/4. + .5;
}

float rocks(vec2 p){
	float d = texture(depthTex, p).r;
    return d + .4 * fbmabs(p);
}

float map( vec3 p)
{
	float d1 = p.y -.4*rocks(p.xz);
	float d2 = p.y -.4*sea(p.xz);
    dh = d2-d1;
    float d = min(d1,d2);
	return d;

}

vec3 normalRocks(in vec2 p)
{
	const vec2 e = vec2(0.004, 0.0);
	return normalize(vec3(
		rocks(p + e.xy) - rocks(p - e.xy),
        .03,
		rocks(p + e.yx) - rocks(p - e.yx)
		));
}

vec3 normalSea(in vec2 p)
{
	const vec2 e = vec2(0.002, 0.0);
	return normalize(vec3(
		sea(p + e.xy) - sea(p - e.xy),
        .004,
		sea(p + e.yx) - sea(p - e.yx)
		));
}

vec3 sky(in vec2 p)
{
	return sin(vec3(1.7,1.5,1)+1. + .45*fbmabs(p*4. - .02*iGlobalTime));
}

float march(in vec3 ro, in vec3 rd)
{
	const float maxd = 30.0;
	const float precis = 0.001;
    float h = precis * 2.0;
    float t = 0.0;
	float res = -1.0;
    for(int i = 0; i < 2; i++)
    {
        if(h < precis*t || t > maxd) break;
	    h = map(ro + rd * t);
        t += h;
    }
    if(t < maxd) res = t;
    return res;
}

/*
 * main entry.
 */
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	//vec2 p = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;
	vec2 p = fragCoord.xy / iResolution.y;
	p.x /= iResolution.x/iResolution.y;
	vec3 col = vec3(0.);

    vec3 li = normalize(vec3(-2., 2., -2.));

    /*
     * world coordinates calc.
     * according to 'http://9bitscience.blogspot.jp/2013/07/raymarching-distance-fields_14.html';
     * this is looking straight down from 'up'.
     */
	vec3 right = vec3(1, 0, 0);
	vec3 front = vec3(0, 0, 1);
	vec3 ro = right * p.x + front * p.y;
	ro.y += 1.0;
	vec3 rd = normalize(cross(right, front));

	/*
	 * raymarching.
	 */
    float t = march(ro, rd);

    if(t > -0.001)
    {
        if(dh<0.)t-=dh;
        vec3 pos = ro + t * rd;

        float k = 2.0 * rocks(pos.xz);

        vec3 nor = normalRocks(pos.xz);
        float r = max(dot(nor, li), 0.05)/2.;
        if(dh < 0. && dh > -.08) r+=.5*exp(20. * dh);

        vec3 col1 =vec3(r*k*k, r*k, r*.8);
        if(dh<0.01){
        	vec3 nor = normalSea(pos.xz);
        	nor = reflect(rd, nor);
        	col1 += pow(max(dot(li, nor), 0.0), 5.0)*vec3(.8);
        	col1 +=.2* sky(nor.yz);
        }
	    col = .1+col1;

	}

   	fragColor = vec4(col, 1.0);
}


void main() {
	vec4 color;
	mainImage(color, gl_FragCoord.xy);

	color.w = 1.0;
	gl_FragColor = color;
}
